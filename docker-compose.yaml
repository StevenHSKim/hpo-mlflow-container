version: '3.8'

services:
  # MLflow 서버
  mlflow:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mlflow_server
    restart: unless-stopped
    ports:
      - "5000:5000"
    depends_on:
      - mysql
      - minio
    env_file:
      - config.env
    networks:
      - mlops_network
    volumes:
      - ./config.env:/mlflow/config.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MySQL 데이터베이스 서버
  mysql:
    image: mysql:8.0
    container_name: mlflow_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_USER: mlflow_user
      MYSQL_PASSWORD: mlflow_password
      MYSQL_DATABASE: mlflow
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - mlops_network
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "mlflow_user", "-pmlflow_password"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO 객체 스토리지 서버
  minio:
    image: minio/minio:latest
    container_name: mlflow_minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minio_access_key
      MINIO_ROOT_PASSWORD: minio_secret_key
    ports:
      - "9000:9000"
      - "9001:9001"  # MinIO 콘솔 (웹 UI)
    volumes:
      - minio_data:/data
    networks:
      - mlops_network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO 초기화 (버킷 생성)
  minio-init:
    image: minio/mc:latest
    container_name: minio_init
    depends_on:
      - minio
    networks:
      - mlops_network
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc config host add myminio http://minio:9000 minio_access_key minio_secret_key;
      /usr/bin/mc mb --ignore-existing myminio/mlflow-artifacts;
      /usr/bin/mc policy set download myminio/mlflow-artifacts;
      exit 0;
      "

  # FastAPI (선택 사항) - MLflow와 연동하는 API 서버
  # 필요에 따라 아래 서비스 주석 해제 후 사용
  # fastapi:
  #   build:
  #     context: ./fastapi
  #     dockerfile: Dockerfile
  #   container_name: fastapi_server
  #   restart: unless-stopped
  #   ports:
  #     - "8000:8000"
  #   depends_on:
  #     - mlflow
  #   env_file:
  #     - config.env
  #   networks:
  #     - mlops_network

networks:
  mlops_network:
    driver: bridge

volumes:
  mysql_data:
  minio_data: